[project]
name = "segy"
dynamic = [ "version", "classifiers" ]
description = "The Ultimate Python SEG-Y I/O with Cloud Support and Schemas"
authors = [{ name = "Altay Sansal", email = "altay.sansal@tgs.com" }]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/TGSAI/segy"
keywords = ["segy", "seismic", "data", "geophysics"]
requires-python = ">=3.10,<3.13"
dependencies = [
    "fsspec (>=2024.10.0,<2025.0.0)",
    "numpy (>=2.0.0,<3.0.0)",
    "pydantic (>=2.9.2,<3.0.0)",
    "pydantic-settings (>=2.6.1,<3.0.0)",
    "numba (>=0.59.1,<0.70.0)",
    "pandas (>=2.2.2,<3.0.0)",
    "typer (>=0.13.1,<0.14.0)",
    "rapidfuzz (>=3.10.1,<4.0.0)",
]

[project.optional-dependencies]
cloud = [
    "s3fs>=2024.10.0",
    "gcsfs>=2024.10.0",
    "adlfs>=2024.7.0"
]

[project.urls]
homepage = "https://mdio.dev/"
repository = "https://github.com/TGSAI/mdio-python"
documentation = "https://segy.readthedocs.io"

[project.scripts]
segy = "segy.cli.segy:app"

[tool.poetry]
packages = [{ include = "segy", from = "src" }]
version = "0.3.0"
classifiers = ["Development Status :: 4 - Beta"]

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.8.0"

[tool.poetry.group.dev.dependencies]
ruff = "^0.7.4"
coverage = {version = "^7.6.7", extras = ["toml"]}
mypy = "^1.13.0"
pytest = "^8.3.3"
pre-commit = "^4.0.1"
pre-commit-hooks = "^5.0.0"
typeguard = "^4.4.1"
pandas-stubs = "^2.2.2.240807"

[tool.poetry.group.docs.dependencies]
sphinx = "7.4.7"
sphinx-design = "^0.6.1"
sphinx-copybutton = "^0.5.2"
furo = ">=2024.8.6"
myst-nb = "^1.1.1"
linkify-it-py = "^2.0.3"
autodoc-pydantic = "^2.2.0"
sphinxcontrib-typer = "^0.5.0"
sphinx-autobuild = ">=2024.9.3"

[tool.ruff]
target-version = "py39"
src = ["src"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle
    "F",   # pyflakes
    "B",   # bugbear
    "I",   # isort
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "D",   # pydocstyle
    "ANN", # annotations
    "S",   # bandit
    "A",   # builtins
    "C4",  # comprehensions
    "DTZ", # datetimez
    "EM",  # errmsg
    "ICN", # import-conventions
    "PIE", # pie
    "PT",  # pytest-style
    "RSE", # raise
    "RET", # return
    "SIM", # simplify
    "TID", # tidy-imports
    "TCH", # type-checking
    "ARG", # unused-arguments
    "PTH", # use-pathlib
    "TD",  # todos
    "PL",  # pylint
    "FLY", # flynt
    "NPY201", # numpy
    "LOG", # logging
    "G", # logging-format
    "PERF", # perflint
]

ignore = [
    "ANN101", # Missing type annotation for `self`
    "D107",   # Missing docstring in __init__ ; should be in class docstring
]

[tool.ruff.lint.per-file-ignores]
"src/segy/standards/fields.py" = ["E501"]
"tests/*" = ["S101"]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.pycodestyle]
max-line-length = 100
ignore-overlong-task-comments = true

[tool.pydoclint]
style = "google"
arg-type-hints-in-docstring = false
check-return-types = false
check-yield-types = false
exclude = 'src/segy/ibm.py'

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["segy", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 93
exclude_also = [
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "def __repr__",
    "raise NotImplementedError",
]

[tool.mypy]
strict = true
warn_unreachable = true
warn_redundant_casts = true
warn_unused_ignores = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
plugins = ["pydantic.mypy", "numpy.typing.mypy_plugin"]

# for strict mypy: (this is the tricky one)
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = ["fsspec.*", "numba.*"]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[build-system]
requires = ["poetry-core", "fastentrypoints"]
build-backend = "poetry.core.masonry.api"
