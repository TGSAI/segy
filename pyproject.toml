[tool.poetry]
name = "segy"
version = "0.0.16"
description = "The Ultimate Python SEG-Y I/O with Cloud Support and Schemas"
authors = ["TGS <sys-opensource@tgs.com>"]
maintainers = [
    "Altay Sansal <altay.sansal@tgs.com>",
]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/TGSAI/segy"
documentation = "https://segy.readthedocs.io"
classifiers = [
    "Development Status :: 4 - Beta",
]
packages = [
    { include = "segy", from = "src" },
]
keywords = ["segy", "seismic", "data", "geophysics"]

[tool.poetry.dependencies]
python = ">=3.9, <3.13"
fsspec = "^2024.3.1"
numpy = "^1.26.4"
pydantic = "^2.7.1"
pydantic-settings = "^2.2.1"
numba = "^0.59.1"
pandas = "^2.2.2"
bidict = "^0.23.1"
typer = {version = "^0.12.3", extras = ["all"]}
gcsfs = {version = ">=2024.3.1", optional = true}
s3fs = {version = ">=2024.3.1", optional = true}
adlfs = {version = ">=2024.4.1", optional = true}
eval-type-backport = {version = "^0.1.3", python = "<3.10"}

[tool.poetry.group.dev.dependencies]
ruff = "^0.4.3"
coverage = {version = "^7.5.1", extras = ["toml"]}
mypy = "^1.10.0"
pytest = "^8.2.0"
pre-commit = "^3.7.0"
pre-commit-hooks = "^4.6.0"
typeguard = "^4.2.1"
urllib3 = "^1.26.18" # Workaround for poetry-plugin-export/issues/183
pandas-stubs = "^2.2.1.240316"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.3.7"
sphinx-design = "^0.5.0"
sphinx-copybutton = "^0.5.2"
furo = ">=2024.5.6"
myst-nb = "^1.1.0"
linkify-it-py = "^2.0.3"
autodoc-pydantic = "^2.2.0"
sphinxcontrib-typer = "^0.2.1"
sphinx-autobuild = ">=2024.4.16"

[tool.poetry.extras]
cloud = ["s3fs", "gcsfs", "adlfs"]

[tool.poetry.scripts]
segy = "segy.cli.segy:app"

[tool.ruff]
target-version = "py39"
src = ["src"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle
    "F",   # pyflakes
    "B",  # bugbear
    "I",  # isort
    "UP",  # pyupgrade
    "N",  # pep8-naming
    "D",   # pydocstyle
    "ANN",  # annotations
    "S",  # bandit
    "A",  # builtins
    "C4",  # comprehensions
    "DTZ",  # datetimez
    "EM",  # errmsg
    "ICN",  # import-conventions
    "PIE",  # pie
    "PT",  # pytest-style
    "RSE",  # raise
    "RET",  # return
    "SIM",  # simplify
    "TID",  # tidy-imports
    "TCH",  # type-checking
    "ARG",  # unused-arguments
    "PTH",  # use-pathlib
    "TD",  # todos
    "PL",  # pylint
    "FLY", # flynt
    "NPY",  # numpy
]

ignore = [
    "ANN101",  # Missing type annotation for `self`
    "D107",  # Missing docstring in __init__ ; should be in class docstring
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.pycodestyle]
max-line-length = 100
ignore-overlong-task-comments = true

[tool.pydoclint]
style = "google"
arg-type-hints-in-docstring = false
check-return-types = false
check-yield-types = false
exclude = 'src/segy/ibm.py'

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["segy", "tests"]

[tool.coverage.report]
show_missing = true
fail_under = 90
exclude_also = [
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "def __repr__",
    "raise NotImplementedError"
]

[tool.mypy]
strict = true
warn_unreachable = true
warn_redundant_casts = true
warn_unused_ignores = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
plugins = ["pydantic.mypy", "numpy.typing.mypy_plugin"]

# for strict mypy: (this is the tricky one)
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = ["fsspec.*", "numba.*"]
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[build-system]
requires = ["poetry-core", "fastentrypoints"]
build-backend = "poetry.core.masonry.api"
